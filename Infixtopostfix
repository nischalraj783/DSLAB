#include<stdio.h>
#include<stdlib.h>

char stack[30];
int top=-1;

void push(char value)
{
    stack[++top]=value;
}
char pop()
{
    return stack[top--];
}
int precedence(char symbol)
{
    switch(symbol)
    {
        case '+':
        case '-':
            return 2;
            break;
        case '*':
        case '/':
            return 3;
            break;
        case '^':
            return 4;
            break;
        case '(':
        case ')':
        case '#':
            return 1;
            break;
            
    }
}
int isoperator(char symbol)
{
    switch(symbol){
    case '+':
    case '-':
    case '*':
    case '/':
    case '^':
    case '(':
    case ')':
    case '#':
            return 1;
            break;
    default:return 0;
            break;
}
}
void convert(char infix[],char postfix[])
{
    int i,j=0,symbol;
    stack[++top]='#';
    for(i=0;i<strlen(infix);i++)
    {
        symbol=infix[i];
        if(isoperator(symbol)==0)
        {
            postfix[j]=symbol;
            j++;
        }
        else
        {
            if(symbol=='(')
            {
                push(symbol);
            }
            else
            {
               if(symbol==')')
               {
                   while(stack[top]!='(')
                   {
                       postfix[j]=pop();
                       j++;
                   }
                   pop();
               }
               else
               {
                  if(precedence(symbol)>precedence(stack[top]))
                  {
                      push(symbol);
                  }
                  else
                  {
                      while(precedence(symbol)<=precedence(stack[top])) 
                      {
                           postfix[j]=pop();
                           j++;
                      }
                      push(symbol);
                   }
               }
            }
        }
            
    }
while(stack[top]!='#')
{
    postfix[j]=pop();
    j++;
}
postfix[j]='\0';
}
void main()
{
    char infix[40],postfix[40];
    printf("\n Enter postfix expression");
    scanf("%s",infix);
    convert(infix,postfix);
    printf("%s",postfix);
}
    
