#include <stdio.h>//standard input output
#include <string.h>
#define MAX 25//defining size of MAX is 25
char infix[MAX], prefix[MAX];//initializing infix,prefix and stack 

void reverse(char array[])
{
    char temp[30];
    int i,j=-1;
    for(i=0;i<strlen(array);i++)
    {
        temp[i]=array[i];
        ++j;
    }
    for(i=0;i<strlen(array);i++)
    {
        array[i]=temp[j];
        --j;
    }
    array[++i]='\0';
}
void paren(char arr[])
{
    int k;
    for(k=0;k<strlen(arr);k++)
    {
        if(arr[k]=='(')
        {
            arr[k]=')';
        }
        else if(arr[k]==')')
        {
            arr[k]='(';
        }
    }
}

char stack[25]; 
int top = -1; 

void push(char item) {
   stack[++top] = item; 
} 

char pop() {
   return stack[top--]; 
} 

//returns precedence of operators
int precedence(char symbol) {

   switch(symbol) {
      case '+': 
      case '-':
         return 2; 
         break; 
      case '*': 
      case '/':
         return 3; 
         break; 
      case '^': 
         return 4; 
         break; 
      case '(': 
      case ')': 
      case '#':
         return 1; 
         break; 
   } 
} 

//check whether the symbol is operator?
int isOperator(char symbol) {

   switch(symbol) {
      case '+': 
      case '-': 
      case '*': 
      case '/': 
      case '^': 
      case '(': 
      case ')':
         return 1; 
      break; 
         default:
         return 0; 
   } 
} 

//converts infix expression to postfix
void convert(char infix[],char postfix[]) {
   int i,symbol,j = 0; 
   stack[++top] = '#'; 
	
   for(i = 0;i<strlen(infix);i++) {
      symbol = infix[i]; 
		
      if(isOperator(symbol) == 0) {
         postfix[j] = symbol; 
         j++; 
      } else {
         if(symbol == '(') {
            push(symbol); 
         } else {
            if(symbol == ')') {
				
               while(stack[top] != '(') {
                  postfix[j] = pop(); 
                  j++; 
               } 
					
               pop();   //pop out (. 
            } else {
               if(precedence(symbol)>precedence(stack[top])) {
                  push(symbol); 
               } else {
					
                  while(precedence(symbol)<=precedence(stack[top])) {
                     postfix[j] = pop(); 
                     j++; 
                  } 
						
                  push(symbol); 
               }
            }
         }
      }
   }
	
   while(stack[top] != '#') {
      postfix[j] = pop(); 
      j++; 
   } 
	
   postfix[j]='\0';  //null terminate string. 
} 
void main()//main function
{
   printf("Enter the infix expression:");
   gets(infix);//to take input of infix expression
   reverse(infix);//reverse the infix expression
    paren(infix);
   convert(infix,prefix);
   reverse(prefix);//function to convert infix to prefix
   printf("Prefix Expression is: ");
   for (int i = 0; i < MAX + 1; i++)
   {
       printf("%c", prefix[i]);
   }
}
